def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}

def flutterRoot = localProperties.getProperty('flutter.sdk')
if (flutterRoot == null) {
    throw new GradleException("Flutter SDK not found. Define location with flutter.sdk in the local.properties file.")
}

def flutterVersionCode = localProperties.getProperty('flutter.versionCode')
if (flutterVersionCode == null) {
    flutterVersionCode = '1'
}

def flutterVersionName = localProperties.getProperty('flutter.versionName')
if (flutterVersionName == null) {
    flutterVersionName = '1.0'
}

// kmao  com.android.application -> com.android.dynamic-feature

apply plugin: 'com.android.application'
//apply plugin: 'com.android.dynamic-feature'

apply from: "$flutterRoot/packages/flutter_tools/gradle/flutter.gradle"


// add by kmao

def keystorePropertiesFile = rootProject.file("key.properties")
def keystoreProperties = new Properties()
//keystoreProperties.load(new FileInputStream(keystorePropertiesFile))
if (keystorePropertiesFile.exists()) {
   keystoreProperties.load(new FileInputStream(keystorePropertiesFile))
}

android {
    compileSdkVersion 28
	//publishNonDefault true
//    minifyEnabled true

    lintOptions {
        disable 'InvalidPackage'
    }

    aaptOptions {
        ignoreAssetsPattern '!.svn:!.git:!.ds_store:!*.scc:.*:<dir>_*:!CVS:!thumbs.db:!picasa.ini:!*~'
        noCompress 'db'
    }


    defaultConfig {
        // TODO: Specify your own unique Application ID (https://developer.android.com/studio/build/application-id.html).
        applicationId "com.dg006.fluttershop"
        minSdkVersion 19
        targetSdkVersion 30
        multiDexEnabled true
        versionCode flutterVersionCode.toInteger()
        versionName flutterVersionName
        testInstrumentationRunner 'androidx.test.runner.AndroidJUnitRunner'
    }
	
	signingConfigs {
		release {
			keyAlias keystoreProperties['keyAlias']
			keyPassword keystoreProperties['keyPassword']
			storeFile file(keystoreProperties['storeFile'])
			storePassword keystoreProperties['storePassword']
		}
    }

    buildTypes {
        release {
            // TODO: Add your own signing config for the release build.
            // Signing with the debug keys for now, so `flutter run --release` works.
 			//minifyEnabled true
            //signingConfig signingConfigs.debug
			signingConfig signingConfigs.release
        }
    }
}

flutter {
    source '../..'
}

dependencies {
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.test.ext:junit:1.1.1'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.1.0'

    implementation "androidx.multidex:multidex:2.0.1"

    implementation 'com.google.android.material:material:1.4.0'
//    implementation 'com.google.android.material:material:1.5.0-alpha05'
	
//	releaseCompile project(path: ':theotherproject', configuration: 'release')
//    debugCompile project(path: ':theotherproject', configuration: 'debug')
}


apply plugin: 'com.google.gms.google-services'